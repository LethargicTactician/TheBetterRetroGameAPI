openapi: 3.1.0
info:
  title: Retro Game api
  description: retro game hypermedia api
  version: 1.0.0
paths:
  #Retro game api crud operations
  /v1/users:
    parameters:
      $ref: '#components/schemas/users'
    get:
      tags:
        - users
      summary: gets all users in existence
      operationID: getUsers
      response:
        '200':
          description: successful operation

        '400':
          description: invalid
  /v1/users/{user-id}:Im
    parameters:
      $ref: '#components/schemas/users'
    get:
      tags: 
        - users
      summary: get all users
      description: get all users by id
      operationID: getUsersById
      parameters: 
        - user-id: user-id 
          in: path
          description: user id
          required: true
          type: integer
      response: 
        '200':
          description: Successful operation
  /v1/users/register:
    parameters:
      $ref: '#components/schemas/users'
    post:
      tags:
        - users
      operationID: checkRegistrationFields
      response:
        '200':
          descrition: successfully registers a user and stores it into the database
        '400':
          description: failed to register a user
  /v1/games:
    parameters:
      $ref: '#components/schemas/games'
    get:
      tags:
        - games
      summary: gets all games
      parameters: 
        - games 
    
  /v1/games/registergame:
    parameters:
      $ref: '#components/schemas/games'
    post:
      summary: registers a game
      responses:
        '200':
          description: "OK"
        '400':
          description: "Bad Request"
  /v1/games/{gameId}:
    parameters:
      $ref: '#components/schemas/games'
    get: 
      summary: gets a user by id
      responses: 
        '200':
          description: "OK"
        '400':
          descrition: "bad request"
  /v1/offers:
    parameters:
      $ref: '#components/schemas/offers'
    get: 
      summary: gets offers
      operationID: getOffers
      responses: 
        '200':
          description: "OK"
        '400':
          description: "bad request"
    put: 
      summary: update status
      operationID: putOffers
      responses:
        '200':
          desctiption: "OK"
        '400':
          description: "Bad Request"
  /v1/offers/registerOffers:
    parameters:
      $ref: '#components/schemas/offers'
    post:
      summary: create an offer
      operationID: registerOffer
      responses:
        '200':
          description: 'OK'
        '400':
          description: 'Bad Request'
components:
  parameters:
    userIdParam:
      name: user-id
      type: integer
  schemas:
    games:
    game:
      type: object
      properties:
        gameId:
          type: integer
          autogenerated: true
        gamename: 
          type: string
          required: true
        publisher:
          type: string
          required: true
        publishingYear:
          type: int
          required: false
        gameCondition:
          type: string 
          required: true
        game_owner:
          type: foreign key, int
    users:
      user:
        type: object
        properties:
          user-id:
            type: integer
          email:
            type: string
            validation: true
          password:
            type: string
            required: true
            condition: 8 or more characters
            validation: true
          username: 
            type: string
            required: true
          streetAddress:
            type: string
          city: 
            type: string
          state: 
            type: string
          zip:
            type: integer
    offers:
      offer:
        type: object
        properties:
          offer-id: 
            type: integer
          status: 
            type: integer
            description: it was supposed to be a boolean but now it's a integer that represents "1" for true and "2" for false
          userid:
            type: foreign key (integer)
          gameid:
            type: foreign key (integer)